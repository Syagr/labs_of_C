using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

public interface ISnakeGame
{
    void StartGame();
    void MoveSnake();
    void EndGame();
}

public class SnakeGame : ISnakeGame
{
    private const int ConsoleWidth = 40;
    private const int ConsoleHeight = 20;
    private Queue<Position> snake;
    private Position food;
    private Direction direction;
    private bool isGameOver;

    public SnakeGame()
    {
        snake = new Queue<Position>();
        snake.Enqueue(new Position(ConsoleWidth / 2, ConsoleHeight / 2));
        direction = Direction.Right;
        isGameOver = false;


        SpawnFood();
    }

    public void StartGame()
    {
        Console.Clear();
        while (!isGameOver)
        {
            Draw();
            ConsoleKeyInfo keyInfo = Console.ReadKey();
            HandleKeyPress(keyInfo);
            MoveSnake();
            CheckCollision();
            Thread.Sleep(100);
        }
        EndGame();
    }

    public void MoveSnake()
    {
        Position head = snake.Last();
        Position newHead = new Position(head.X, head.Y);

        switch (direction)
        {
            case Direction.Up:
                newHead.Y--;
                break;
            case Direction.Down:
                newHead.Y++;
                break;
            case Direction.Left:
                newHead.X--;
                break;
            case Direction.Right:
                newHead.X++;
                break;
        }

        snake.Enqueue(newHead);

        if (newHead.X != food.X || newHead.Y != food.Y)
            snake.Dequeue();
        else
            SpawnFood();
    }

    public void EndGame()
    {
        Console.Clear();
        Console.WriteLine("Гра завершена. Дякую за гру!");
    }

    private void Draw()
    {
        Console.Clear();

        foreach (Position pos in snake)
        {
            Console.SetCursorPosition(pos.X, pos.Y);
            Console.Write("*");
        }

        // Малюємо їжу
        Console.SetCursorPosition(food.X, food.Y);
        Console.Write("#");
    }

    private void SpawnFood()
    {
        Random random = new Random();
        int x = random.Next(0, ConsoleWidth);
        int y = random.Next(0, ConsoleHeight);
        food = new Position(x, y);
    }

    private void HandleKeyPress(ConsoleKeyInfo keyInfo)
    {
        switch (keyInfo.Key)
        {
            case ConsoleKey.W:
                if (direction != Direction.Down)
                    direction = Direction.Up;
                break;
            case ConsoleKey.S:
                if (direction != Direction.Up)
                    direction = Direction.Down;
                break;
            case ConsoleKey.A:
                if (direction != Direction.Right)
                    direction = Direction.Left;
                break;
            case ConsoleKey.D:
                if (direction != Direction.Left)
                    direction = Direction.Right;
                break;
        }
    }

    private void CheckCollision()
    {
        Position head = snake.Last();

        if (head.X < 0 || head.X >= ConsoleWidth || head.Y < 0 || head.Y >= ConsoleHeight)
            isGameOver = true;

        if (snake.Count != snake.Distinct().Count())
            isGameOver = true;
    }

    private class Position
    {
        public int X { get; set; }
        public int Y { get; set; }

        public Position(int x, int y)
        {
            X = x;
            Y = y;
        }
    }

    private enum Direction
    {
        Up,
        Down,
        Left,
        Right
    }
}

class Program
{
    static void Main()
    {
        ISnakeGame snakeGame = new SnakeGame();
        snakeGame.StartGame();
    }
}


